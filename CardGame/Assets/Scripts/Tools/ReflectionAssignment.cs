//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq.Expressions;
using System.IO;
using System.Collections;
using System.Collections.Generic;
//using Hashtable = ExitGames.Client.Photon.Hashtable;

public class ReflectionAssignment
{
	public ReflectionAssignment ()
	{
	}

	/// <summary>
	/// Loads the and resolve data.
	/// 读取路径下的文件然后 赋值到一个类型对象 数组;
	/// </summary>
	/// <returns>The and resolve data.</returns>
	/// <param name="filePath">File path.</param>
	/// <typeparam name="T">The 1st type parameter.</typeparam>
	public static List<T> LoadAndResolveData<T> (string filePath) where T : class, new()
	{
		List<T> temTArr = new List<T> ();
		FileInfo info = new FileInfo (filePath);
		if (info == null) {
			Debuger.LogError ("txt null " + filePath);
			return temTArr;
		}
		StreamReader fiSR = info.OpenText ();
		
		string line = "";
		ArrayList arrlist = new ArrayList ();
		string[] allNameArr = null;
		while ((line = fiSR.ReadLine ()) != null) {
			//一行一行的读取
			//将每一行的内容存入数组链表容器中
			if (allNameArr == null) {
				allNameArr = line.Split ('\t');
			} else {
				string[] coloumData = line.Split ('\t');
				arrlist.Add (coloumData);
				T oneTem = new T ();
				Type type = oneTem.GetType (); //获取类型;
//				MemberInfo[] allM = type.GetMembers();
//				PropertyInfo[] allP = type.GetProperties();
				bool bCanAdd = false;
				if (coloumData.Length >= allNameArr.Length) {
					bCanAdd = true;
					for (int i = 0; i < allNameArr.Length; i++) {
						string oneName = allNameArr [i];
						string getCt = coloumData [i];
						if (oneName != null && oneName != "") {
							try {
								System.Reflection.PropertyInfo propertyInfo = type.GetProperty (oneName); //获取指定名称的属性;
								if (propertyInfo != null) {							
									if (propertyInfo.PropertyType.Name == "Int32") {
										getCt = getCt == "" ? "0" : getCt;
										propertyInfo.SetValue (oneTem, Convert.ToInt32 (getCt), null); //给对应属性赋值;
									}else if(propertyInfo.PropertyType.Name == "Single"){
										getCt = getCt == "" ? "0" : getCt;
										propertyInfo.SetValue (oneTem, Convert.ToSingle (getCt), null); //给对应属性赋值;
									}
									else {
										propertyInfo.SetValue (oneTem, getCt, null); //给对应属性赋值;
									}
								} else {
									bCanAdd = false;
									Debuger.LogError ("No  PropertyInfo = " + oneName);
								}
							} catch (System.Exception e) {
								bCanAdd = false;
								Debuger.LogError ("setvalue error = " + oneName + " value " + getCt);
							}
						}
					}
				} else {
					Debuger.LogError ("tab Data error line = " + arrlist.Count + "  " + filePath);
				}

				if (bCanAdd) {
					temTArr.Add (oneTem);
				}
			}
		}
		//关闭流
		fiSR.Close ();
		//销毁流
		fiSR.Dispose ();
		return temTArr;
	}

	/// <summary>
	/// Loads the static and resolve data.
	/// 读取配置文件 赋值给一个类;
	/// </summary>
	/// <param name="filePath">File path.</param>
	/// <typeparam name="T">The 1st type parameter.</typeparam>
	public static void LoadStaticAndResolveData<T> (string filePath)  where T : class, new()
	{
		FileInfo info = new FileInfo (filePath);
		StreamReader fiSR = info.OpenText ();
		
		string line = "";
		ArrayList arrlist = new ArrayList ();
		string[] allNameArr = null;
		while ((line = fiSR.ReadLine ()) != null) {
			string[] coloumData = line.Split ('\t');
			if (coloumData.Length >= 2) {
				string propertyName = coloumData [0];
				string propertyValue = coloumData [1];
				if (propertyName != null && propertyName != "") {
					T oneTem = new T ();
					Type type = oneTem.GetType (); //获取类型;
					try {
						System.Reflection.PropertyInfo propertyInfo = type.GetProperty (propertyName); //获取指定名称的属性;
						if (propertyInfo != null) {							
							if (propertyInfo.PropertyType.Name == "Int32") {
								propertyValue = propertyValue == "" ? "0" : propertyValue;
								propertyInfo.SetValue (oneTem, Convert.ToInt32 (propertyValue), null); //给对应属性赋值;
							} else if(propertyInfo.PropertyType.Name == "Single"){
								propertyValue = propertyValue == "" ? "0" : propertyValue;
								propertyInfo.SetValue (oneTem, Convert.ToSingle (propertyValue), null); //给对应属性赋值;
							}
							else {
								propertyInfo.SetValue (oneTem, propertyValue, null); //给对应属性赋值;
							}
						}
					} catch (System.Exception e) {
//						Debuger.LogError("setvalue static error = "+ propertyName);
					}
				}
			}
		}
		//关闭流
		fiSR.Close ();
		//销毁流
		fiSR.Dispose ();
	}

	/// <summary>
	/// Loads the has tab to object.
	/// 讲哈希表的中数据写给 一个对象;
	/// </summary>
	/// <param name="tab">Tab.</param>
	/// <param name="tarObj">Tar object.</param>
	/// <typeparam name="T">The 1st type parameter.</typeparam>
	public static void LoadHasTabToObject<T> (Hashtable tab, T tarObj)  where T : class, new()
	{
		if (tarObj != null && tab != null) {
			Type type = tarObj.GetType (); //获取类型;

			foreach (DictionaryEntry  oneObj in tab) {

//				Debuger.Log ("ct is " + oneObj.Key + "  "+oneObj.Value);
				try {
					System.Reflection.PropertyInfo propertyInfo = type.GetProperty ((string)oneObj.Key); //获取指定名称的属性;
					if (propertyInfo != null) {			
						propertyInfo.SetValue (tarObj, oneObj.Value, null); //给对应属性赋值;

					} else {
						Debuger.Log ("No  PropertyInfo " + (string)oneObj.Key + " in this target = " + tarObj.ToString ());
					}
				} catch (System.Exception e) {
					Debuger.LogError ("setvalue error = " + oneObj.Key + " value " + oneObj.Value + "  " + tarObj.ToString ());
				}
			}
		}

	}
	/// <summary>
	/// Gets the object has tab.
	/// 获取对象属性的哈希表结构;
	/// </summary>
	/// <returns>The object has tab.</returns>
	/// <param name="tarObj">Tar object.</param>
	/// <param name="exprs">Exprs.</param>
	/// <typeparam name="T">The 1st type parameter.</typeparam>
	public static Hashtable GetObjHasTab <T> (T tarObj, params Expression<Func<T, object>>[] exprs)
	{
		Hashtable tab = new Hashtable ();

		Type type = tarObj.GetType (); //获取类型;

		for (int i = 0; i < exprs.Length; i++) {
			Expression<Func<T, object>> expr = exprs [i];

			string strName = "";
			switch (expr.Body.NodeType) {
			case ExpressionType.MemberAccess:
				strName = ((MemberExpression)expr.Body).Member.Name;
				break;
			case ExpressionType.Convert:
				strName = ((MemberExpression)((UnaryExpression)expr.Body).Operand).Member.Name;
				break;
			default:
				strName = "";
				break;
			}
			if (strName != "") {
				System.Reflection.PropertyInfo propertyInfo = type.GetProperty (strName); //获取指定名称的属性;
				object val = propertyInfo.GetValue (tarObj, null);
				tab [strName] = val;
			}
		}


		return tab;
	}

	/// <summary>
	/// Gets the name of the property.
	/// 获取一个对象的属性名称;
	/// </summary>
	/// <returns>The property name.</returns>
	/// <param name="expr">Expr.</param>
	/// <typeparam name="T">The 1st type parameter.</typeparam>
	public  static string GetPropName<T> (Expression<Func<T, object>> expr)
	{
		switch (expr.Body.NodeType) {
		case ExpressionType.MemberAccess:
			return ((MemberExpression)expr.Body).Member.Name;
		case ExpressionType.Convert:
			return ((MemberExpression)((UnaryExpression)expr.Body).Operand).Member.Name;
		default:
			return null;
		}
	}

	//	public  static string GetPropValue<T>(Expression<Func<T, object>> expr)
	//	{
	//		switch (expr.Body.NodeType)
	//		{
	//		case ExpressionType.MemberAccess:
	//			return ((MemberExpression)expr.Body).Member.Name;
	//		case ExpressionType.Convert:
	//			return ((MemberExpression)((UnaryExpression)expr.Body).Operand).Member.Name;
	//		default:
	//			return null;
	//		}
	//	}
}


